name: Scan and Publish

on:
  push:
    branches: [ "master", "main" ] 
  pull_request:
    branches: [ "master", "main" ] 
  workflow_dispatch:

env:
  REPO: ${{ github.event.repository.name }}
  DOCKER_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
  PRISMA_USERNAME: ${{ secrets.PCC_USER }}
  PRISMA_PASSWORD: ${{ secrets.PCC_PASS }}
  PRISMA_API_URL: ${{ vars.PRISMA_API_URL }}
  COMPUTE_URL: "https://us-west1.cloud.twistlock.com/us-4-161028595"
  BUILD_DIR: "./updater_image"

jobs:


  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # - name: Dump github context
    #   run:   echo "$GITHUB_CONTEXT"
    #   shell: bash
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github) }}
    # - name: Test variables
    #   run: echo "hello from $REPO"
    - name: Run Bridgecrew 
      id: Bridgecrew
      uses: bridgecrewio/bridgecrew-action@master
      # env:
      #   PRISMA_API_URL: https://api4.prismacloud.io
      with:
        api-key: ${{ env.PRISMA_USERNAME }}::${{ env.PRISMA_PASSWORD }}
        #directory: "example/examplea"
        #check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
        #skip_check: CKV_AWS_1 # optional: skip a specific check_id. can be comma separated list
        soft_fail: true
        #framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
        output_format: cli,sarif
        output_file_path: console,results.sarif
        quiet: false
        external_checks_dirs: ./checkov
        download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
        #log_level: DEBUG # optional: set log level. Default WARNING
    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v2
        
    #     # Results are generated only on a success or failure
    #     # this is required since GitHub by default won't run the next step
    #     # when the previous one has failed. Security checks that do not pass will 'fail'.
    #     # An alternative is to add `continue-on-error: true` to the previous step
    #     # Or 'soft_fail: true' to checkov.
    #   if: success() || failure()
    #   with:
    #     sarif_file: results.sarif
    - name: Assign build number
      run: |
        echo "BUILD_ID=$(date +'%y_%m_%d')" >> $GITHUB_ENV
    - name: Lowercase the repo name for docker hub
      run: |
        echo "REPO=`echo $REPO | tr '[:upper:]' '[:lower:]'`" >> $GITHUB_ENV
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_TOKEN }}
    - name: Build the Docker image for scanning purposes
      run: |
        docker build -t "$DOCKER_USERNAME/$REPO:$BUILD_ID" $BUILD_DIR
    # - name: image sandbox
    #   run: |
    #     TOKEN=`curl -k -H "Content-Type: application/json" -X POST -d '{"username":"'"$PRISMA_USERNAME"'","password":"'"$PRISMA_PASSWORD"'"}' $COMPUTE_URL/api/v1/authenticate | jq -r .token `
    #     echo "$TOKEN"
    #     curl --progress-bar -JLO --header "authorization: Bearer $TOKEN" $COMPUTE_URL/api/v1/util/twistcli
    #     chmod a+x ./twistcli
    #     ./twistcli --help
    #     docker image ls
    #     ./twistcli sandbox --address $COMPUTE_URL --token $TOKEN --analysis-duration 1m $DOCKER_USERNAME/$REPO:$BUILD_ID sleep 61
    - name: Prisma Cloud image scan
      id: scan
      uses: PaloAltoNetworks/prisma-cloud-scan@v1
      with:
        pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
        pcc_user: ${{ env.PRISMA_USERNAME }}
        pcc_pass: ${{ env.PRISMA_PASSWORD }}
        image_name: ${{ env.DOCKER_USERNAME }}/${{ env.REPO }}:${{env.BUILD_ID}}
    - name: Run yor action
      uses: bridgecrewio/yor-action@main
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ${{env.BUILD_DIR}}  # Path to the Dockerfile and build context
        platforms: linux/amd64,linux/arm64  # Specify the desired platforms
        push: true 
        tags: |
            ${{env.DOCKER_USERNAME}}/${{env.REPO}}:${{env.BUILD_ID}}
            ${{env.DOCKER_USERNAME}}/${{env.REPO}}:latest
    # Not needed since it is pushed in the above step
    # - name: Publish the Docker image
    #   run: docker push -a ${{ env.DOCKER_USERNAME }}/${{ env.REPO }}